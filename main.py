import os
import re
import logging
from datetime import datetime
from typing import Optional, Dict, Any, List
import asyncio

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackQueryHandler
)
import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FuelTrackingBot:
    def __init__(self, telegram_token: str, google_sheets_credentials_path: str, spreadsheet_id: str):
        self.telegram_token = telegram_token
        self.spreadsheet_id = spreadsheet_id
        self.supported_cars = []
        self.supported_generators = []
        self.last_sheets_check = None
        self.sheets_check_interval = 60

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
        self.scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]

        try:
            self.credentials = Credentials.from_service_account_file(
                google_sheets_credentials_path, scopes=self.scope
            )
            self.gc = gspread.authorize(self.credentials)
            self.spreadsheet = self.gc.open_by_key(spreadsheet_id)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
            self.load_vehicles_and_generators()
            
        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise Exception("–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ credentials.json")
        except gspread.exceptions.APIError as e:
            if "SERVICE_DISABLED" in str(e):
                logger.error("‚ùå Google Sheets API –Ω–µ –≤–∫–ª—é—á–µ–Ω!")
                raise Exception(
                    "Google Sheets API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ!\n"
                    "–í–∫–ª—é—á–∏—Ç–µ API –ø–æ —Å—Å—ã–ª–∫–µ: https://console.developers.google.com/apis/api/sheets.googleapis.com/overview\n"
                    "–¢–∞–∫–∂–µ –≤–∫–ª—é—á–∏—Ç–µ Google Drive API: https://console.developers.google.com/apis/api/drive.googleapis.com/overview"
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
                raise Exception(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e}")
        except PermissionError:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets!")
            raise Exception(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ!\n"
                "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã Google Sheets API –∏ Google Drive API\n"
                "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Service Account –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ\n"
                "3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è API"
            )

        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.purchase_pattern = re.compile(
            r'(?P<car_number>\d+)\s*(?:\n|\s)+[–ö–∫]—É–ø–∏–ª\s+(?P<volume>\d+)\s*–ª–∏—Ç—Ä[–∞-—è]*\s*–ø–æ\s+(?P<price>\d+(?:[.,]\d+)?)\s*–≥—Ä–Ω',
            re.IGNORECASE | re.MULTILINE
        )

        self.refuel_pattern = re.compile(
            r'(?P<car_number>\d+)\s*(?:\n|\s)+[–ó–∑]–∞–ø—Ä–∞–≤–∫–∞\s+(?P<volume>\d+)\s*–ª–∏—Ç—Ä[–∞-—è]*.*?[–ü–ø]—Ä–æ–±–µ–≥[:\s]*(?P<mileage>\d+)\s*–∫–º',
            re.IGNORECASE | re.MULTILINE | re.DOTALL
        )

        self.generator_pattern = re.compile(
            r'(?P<car_number>\d+)\s*(?:\n|\s)+[–ó–∑]–∞–ø—Ä–∞–≤–∫–∞\s+–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.*?(?P<volume>\d+)\s*–ª–∏—Ç—Ä[–∞-—è]*.*?—Ü–µ–Ω–∞\s+(?P<price>\d+(?:[.,]\d+)?)\s*–≥—Ä–Ω.*?–º–æ—Ç–æ—á–∞—Å—ã[:\s]*(?P<hours>\d+)',
            re.IGNORECASE | re.MULTILINE | re.DOTALL
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        self.user_states = {}

    def load_vehicles_and_generators(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Å—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
            all_sheets = self.spreadsheet.worksheets()
            
            # –ò—â–µ–º –ª–∏—Å—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
            self.supported_cars = []
            self.supported_generators = []
            
            for sheet in all_sheets:
                sheet_name = sheet.title
                # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
                number_match = re.search(r'\d+', sheet_name)
                if number_match:
                    number = number_match.group(0)
                    if "–ê–≤—Ç–æ" in sheet_name:
                        self.supported_cars.append(number)
                    elif "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" in sheet_name:
                        self.supported_generators.append(number)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.supported_cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ {len(self.supported_generators)} –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤")

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            sheet_info = self.spreadsheet.title
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–∞–±–ª–∏—Ü–∞: '{sheet_info}'")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_or_create_worksheet(self, sheet_name: str):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            worksheet = self.spreadsheet.worksheet(sheet_name)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(worksheet.get_all_values()) == 0:
                self.setup_worksheet_headers(worksheet)
        except gspread.WorksheetNotFound:
            worksheet = self.spreadsheet.add_worksheet(title=sheet_name, rows=1000, cols=10)
            self.setup_worksheet_headers(worksheet)

        return worksheet

    def setup_worksheet_headers(self, worksheet):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞"""
        sheet_name = worksheet.title
        
        if "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" in sheet_name:
            headers = ["–î–∞—Ç–∞", "–û–±—ä—ë–º (–ª)", "–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ú–æ—Ç–æ—á–∞—Å—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–§–æ—Ç–æ"]
        else:  # –¥–ª—è –ª–∏—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
            headers = ["–î–∞—Ç–∞", "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", "–û–±—ä—ë–º (–ª)", "–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ü—Ä–æ–±–µ–≥", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–§–æ—Ç–æ"]
            
        worksheet.append_row(headers)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        try:
            range_to_format = 'A1:H1' if "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" not in sheet_name else 'A1:G1'
            worksheet.format(range_to_format, {
                "backgroundColor": {"red": 0.8, "green": 0.8, "blue": 0.8},
                "textFormat": {"bold": True}
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [KeyboardButton("üü¢ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞"), KeyboardButton("üîµ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ")],
            [KeyboardButton("üü° –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton("‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä")],
            [KeyboardButton("üìä –û—Å—Ç–∞—Ç–∫–∏"), KeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        cars_list = "\n".join([f"üöó –ê–≤—Ç–æ {car}" for car in self.supported_cars])
        generators_list = "\n".join([f"‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {gen}" for gen in self.supported_generators])

        welcome_message = f"""
üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/balance [–Ω–æ–º–µ—Ä] - –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞
/generator [–Ω–æ–º–µ—Ä] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É  
/history [–Ω–æ–º–µ—Ä] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
/templates - –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π

üöó **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:**
{cars_list}

‚ö° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:**
{generators_list}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!
        """
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def templates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /templates"""
        templates_message = """
üìë –®–∞–±–ª–æ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:

1Ô∏è‚É£ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üü¢ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞"
2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513)
3. –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∏ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   200 –ª–∏—Ç—Ä–æ–≤ –ø–æ 58 –≥—Ä–Ω
4. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

2Ô∏è‚É£ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîµ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ"
2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513)
3. –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∏ –ø—Ä–æ–±–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   30 –ª–∏—Ç—Ä–æ–≤. –ü—Ä–æ–±–µ–≥: 125000 –∫–º
4. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

3Ô∏è‚É£ –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üü° –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"
2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513)
3. –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º, —Ü–µ–Ω—É –∏ –º–æ—Ç–æ—á–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   10 –ª–∏—Ç—Ä–æ–≤, —Ü–µ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å—ã: 255
4. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

4Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:
  - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìà –ò—Å—Ç–æ—Ä–∏—è" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /history [–Ω–æ–º–µ—Ä]
  - –ü—Ä–∏–º–µ—Ä: /history 5513

‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–ø–ª–∏–≤–∞:
  - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –û—Å—Ç–∞—Ç–∫–∏" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /balance [–Ω–æ–º–µ—Ä]
  - –ü—Ä–∏–º–µ—Ä: /balance 5513

‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É:
  - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generator [–Ω–æ–º–µ—Ä]
  - –ü—Ä–∏–º–µ—Ä: /generator 5513

‚ùóÔ∏è –í–∞–∂–Ω–æ: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!
üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"
"""
        await update.message.reply_text(templates_message)

    async def history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /–∏—Å—Ç–æ—Ä–∏—è"""
        if not context.args:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü—Ä–∏–º–µ—Ä: /–∏—Å—Ç–æ—Ä–∏—è 5513"
            )
            return

        car_number = context.args[0]
        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_number} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
            )
            return

        try:
            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            records = worksheet.get_all_records()
            
            if not records:
                await update.message.reply_text(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é {car_number}")
                return

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            last_records = records[-5:]
            message = f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é {car_number}:\n\n"
            
            for record in reversed(last_records):
                operation_type = record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                volume = record.get('–û–±—ä—ë–º (–ª)', '–ù/–î')
                date = record.get('–î–∞—Ç–∞', '–ù/–î')
                
                if operation_type == '–ó–∞–ø—Ä–∞–≤–∫–∞':
                    mileage = record.get('–ü—Ä–æ–±–µ–≥', '–ù/–î')
                    message += (
                        f"‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞: {volume} –ª\n"
                        f"üìè –ü—Ä–æ–±–µ–≥: {mileage} –∫–º\n"
                        f"üìÖ {date}\n"
                    )
                else:
                    price = record.get('–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä', '–ù/–î')
                    message += (
                        f"üõí –ó–∞–∫—É–ø–∫–∞: {volume} –ª\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} –≥—Ä–Ω/–ª\n"
                        f"üìÖ {date}\n"
                    )
                message += "---\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /–æ—Å—Ç–∞—Ç–æ–∫"""
        if not context.args:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü—Ä–∏–º–µ—Ä: /–æ—Å—Ç–∞—Ç–æ–∫ 5513"
            )
            return

        car_number = context.args[0]
        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_number} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
            )
            return

        try:
            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            records = worksheet.get_all_records()

            total_purchased = 0
            total_consumed = 0
            total_cost = 0
            last_mileage = 0

            for record in records:
                if record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–∫—É–ø–∫–∞':
                    volume = float(record.get('–û–±—ä—ë–º (–ª)', 0) or 0)
                    price = float(record.get('–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä', 0) or 0)
                    total_purchased += volume
                    total_cost += volume * price
                elif record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–ø—Ä–∞–≤–∫–∞':
                    total_consumed += float(record.get('–û–±—ä—ë–º (–ª)', 0) or 0)
                    last_mileage = int(record.get('–ü—Ä–æ–±–µ–≥', 0) or 0)

            balance = total_purchased - total_consumed
            avg_price = total_cost / total_purchased if total_purchased > 0 else 0

            message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é {car_number}:

üí∞ –ó–∞–∫—É–ø–ª–µ–Ω–æ: {total_purchased:.1f} –ª
‚õΩ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {total_consumed:.1f} –ª
üìà –û—Å—Ç–∞—Ç–æ–∫: {balance:.1f} –ª
üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} –≥—Ä–Ω/–ª
üìè –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–≥: {last_mileage} –∫–º
            """
            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def generator_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
        if not context.args:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–∏–º–µ—Ä: /–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 5513"
            )
            return

        generator_number = context.args[0]
        if not self.validate_generator_number(generator_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {generator_number} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_generators)}"
            )
            return

        try:
            worksheet_name = f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {generator_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            records = worksheet.get_all_records()
            
            if not records:
                await update.message.reply_text(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É {generator_number}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            last_records = records[-5:]
            total_volume = sum(float(r.get('–û–±—ä—ë–º (–ª)', 0) or 0) for r in records)
            total_cost = sum(float(r.get('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', 0) or 0) for r in records)
            last_hours = int(last_records[-1].get('–ú–æ—Ç–æ—á–∞—Å—ã', 0) or 0)
            
            message = f"""
‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É {generator_number}:

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚õΩ –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume:.1f} –ª
üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f} –≥—Ä–Ω
üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ—Ç–æ—á–∞—Å—ã: {last_hours}

üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–∞–≤–æ–∫:
"""
            
            for record in reversed(last_records):
                volume = record.get('–û–±—ä—ë–º (–ª)', '–ù/–î')
                price = record.get('–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä', '–ù/–î')
                hours = record.get('–ú–æ—Ç–æ—á–∞—Å—ã', '–ù/–î')
                date = record.get('–î–∞—Ç–∞', '–ù/–î')
                
                message += f"""
‚õΩ –û–±—ä–µ–º: {volume} –ª
üí∞ –¶–µ–Ω–∞: {price} –≥—Ä–Ω/–ª
üïê –ú–æ—Ç–æ—á–∞—Å—ã: {hours}
üìÖ {date}
---
"""
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def handle_button_press(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        text = update.message.text if update.message.text else ""
        user_id = update.message.from_user.id

        # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
        if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"]:
            if user_id in self.user_states:
                del self.user_states[user_id]
                await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        if text == "üü¢ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞":
            self.user_states[user_id] = {"action": "purchase", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üîµ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ":
            self.user_states[user_id] = {"action": "refuel", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üü° –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞":
            self.user_states[user_id] = {"action": "generator", "step": "car_number"}
            await update.message.reply_text(
                "‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üìä –û—Å—Ç–∞—Ç–∫–∏":
            self.user_states[user_id] = {"action": "balance", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä":
            self.user_states[user_id] = {"action": "generator_info", "step": "car_number"}
            await update.message.reply_text(
                "‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üìà –ò—Å—Ç–æ—Ä–∏—è":
            self.user_states[user_id] = {"action": "history", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üìã –®–∞–±–ª–æ–Ω—ã":
            await self.templates(update, context)

        else:
            # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.handle_text_input(update, context)

    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        text = update.message.text

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        if user_id in self.user_states:
            try:
                await self.handle_step_input(update, context)
            except KeyError:
                # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
            return

        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    def validate_car_number(self, car_number: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""
        return car_number in self.supported_cars

    def validate_generator_number(self, generator_number: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        return generator_number in self.supported_generators

    async def handle_purchase(self, update: Update, match, username: str, photo_url: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—É–ø–∫–∏ —Ç–æ–ø–ª–∏–≤–∞"""
        if not photo_url:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ —Ç–æ–ø–ª–∏–≤–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        car_number = match.group('car_number')

        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_number} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
            )
            return

        volume = float(match.group('volume'))
        price = float(match.group('price').replace(',', '.'))
        total_cost = volume * price

        try:
            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)

            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è photo_url –¥–ª—è Google Sheets (–∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞)
            formula = None
            if photo_url:
                formula = f'=HYPERLINK("{photo_url}"; IMAGE("{photo_url}"))'

            # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –ø—Ä–æ—Å—Ç–∏–º –ª—ñ–Ω–∫–æ–º —É –ø–æ–ª—ñ —Ñ–æ—Ç–æ
            row_data = [
                current_date,
                "–ó–∞–∫—É–ø–∫–∞",
                volume,
                price,
                total_cost,
                "",  # –ü—Ä–æ–±–µ–≥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º –¥–ª—è –∑–∞–∫—É–ø–∫–∏
                username,
                photo_url if photo_url else ""
            ]

            worksheet.append_row(row_data)

            # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–∞ —Ñ–æ—Ä–º—É–ª—É
            if formula:
                last_row = len(worksheet.get_all_values())
                photo_col = len(row_data)  # —Ñ–æ—Ç–æ –∑–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–ª–µ
                worksheet.update_cell(last_row, photo_col, formula)

            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! {volume} –ª–∏—Ç—Ä–æ–≤ –ø–æ {price} –≥—Ä–Ω –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—å {car_number} —Å —Ñ–æ—Ç–æ —á–µ–∫–∞.\n"
                f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} –≥—Ä–Ω"
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if update.message.from_user.id in self.user_states:
                del self.user_states[update.message.from_user.id]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–∫—É–ø–∫–∏: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–∏—à–µ —Ñ–æ—Ç–æ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    async def handle_photo_only(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫—Ä–µ–º–∏—Ö —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        user_id = update.message.from_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        if user_id in self.user_states:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –ª–∏—à–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç—É –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è –æ–±'—î–º—É
            state = self.user_states[user_id]
            if state["action"] == "purchase" and state["step"] == "volume":
                await update.message.reply_text(
                    "üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–±'—î–º —Ç–∞ —Ü—ñ–Ω—É:\n"
                    "–ü—Ä–∏–∫–ª–∞–¥: 200 –ª—ñ—Ç—Ä—ñ–≤ –ø–æ 58 –≥—Ä–Ω"
                )
                return

        # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await update.message.reply_text(
            "üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–∫—É–ø—ñ–≤–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /fuel"
        )

    async def handle_refuel(self, update: Update, match, username: str, photo_url: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not photo_url:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        car_number = match.group('car_number')
        
        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_number} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
            )
            return

        try:
            volume = float(match.group('volume'))
            mileage = int(match.group('mileage'))
            
            if volume <= 0:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –û–±—ä–µ–º –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
                
            if mileage < 0:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                return

            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è photo_url –¥–ª—è Google Sheets (–∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞)
            formula = None
            if photo_url:
                formula = f'=HYPERLINK("{photo_url}"; IMAGE("{photo_url}"))'

            row_data = [
                current_date,
                "–ó–∞–ø—Ä–∞–≤–∫–∞",
                volume,
                "",  # –¶–µ–Ω–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏
                "",  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏
                mileage,
                username,
                photo_url if photo_url else ""
            ]
            
            worksheet.append_row(row_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–∞–≤–∫–∏
            records = worksheet.get_all_records()
            total_purchased = sum(float(r.get('–û–±—ä—ë–º (–ª)', 0) or 0) for r in records if r.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–∫—É–ø–∫–∞')
            total_consumed = sum(float(r.get('–û–±—ä—ë–º (–ª)', 0) or 0) for r in records if r.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–ø—Ä–∞–≤–∫–∞')
            balance = total_purchased - total_consumed
            
            # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–∞ —Ñ–æ—Ä–º—É–ª—É
            if formula:
                last_row = len(worksheet.get_all_values())
                photo_col = len(row_data)  # —Ñ–æ—Ç–æ –∑–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–ª–µ
                worksheet.update_cell(last_row, photo_col, formula)

            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ {volume} –ª –∑–∞–ø–∏—Å–∞–Ω–∞ —Å —Ñ–æ—Ç–æ —á–µ–∫–∞.\n"
                f"üìè –ü—Ä–æ–±–µ–≥: {mileage} –∫–º\n"
                f"üìä –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: {balance:.1f} –ª"
            )
            
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–∞–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n"
                "–ó–∞–ø—Ä–∞–≤–∫–∞ 30 –ª–∏—Ç—Ä–æ–≤. –ü—Ä–æ–±–µ–≥: 125000 –∫–º"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–∞–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def handle_generator_refuel(self, update: Update, match, username: str, photo_url: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        if not photo_url:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ —Ç–æ–ø–ª–∏–≤–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        car_number = match.group('car_number')
        
        if not self.validate_generator_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {car_number} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_generators)}"
            )
            return

        try:
            volume = float(match.group('volume'))
            price = float(match.group('price').replace(',', '.'))
            hours = int(match.group('hours'))
            
            if volume <= 0:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –û–±—ä–µ–º –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
                
            if price <= 0:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
                
            if hours < 0:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–æ—Ç–æ—á–∞—Å—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
                return

            total_cost = volume * price
            
            worksheet_name = f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è photo_url –¥–ª—è Google Sheets (–∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞)
            formula = None
            if photo_url:
                formula = f'=HYPERLINK("{photo_url}"; IMAGE("{photo_url}"))'

            row_data = [
                current_date,
                volume,
                price,
                total_cost,
                hours,
                username,
                photo_url if photo_url else ""
            ]
            
            worksheet.append_row(row_data)
            
            # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–∞ —Ñ–æ—Ä–º—É–ª—É
            if formula:
                last_row = len(worksheet.get_all_values())
                photo_col = len(row_data)  # —Ñ–æ—Ç–æ –∑–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–ª–µ
                worksheet.update_cell(last_row, photo_col, formula)

            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {car_number} —Å —Ñ–æ—Ç–æ —á–µ–∫–∞\n"
                f"‚õΩ –û–±—ä–µ–º: {volume} –ª\n"
                f"üí∞ –¶–µ–Ω–∞: {price} –≥—Ä–Ω/–ª\n"
                f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} –≥—Ä–Ω\n"
                f"üïê –ú–æ—Ç–æ—á–∞—Å—ã: {hours}"
            )
            
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n"
                "–ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "10 –ª–∏—Ç—Ä–æ–≤, —Ü–µ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å—ã: 255"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def handle_step_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.message.from_user.id
        text = update.message.text or update.message.caption

        if user_id not in self.user_states:
            return

        state = self.user_states[user_id]

        if text and text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"]:
            if user_id in self.user_states:
                del self.user_states[user_id]
                await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        try:
            if state["action"] == "purchase":
                if state["step"] == "car_number":
                    if not self.validate_car_number(text):
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
                        )
                        return
                    state["car_number"] = text
                    state["step"] = "volume"
                    await update.message.reply_text(
                        "‚õΩ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∏ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "200 –ª–∏—Ç—Ä–æ–≤ –ø–æ 58 –≥—Ä–Ω\n\n"
                        "üì∏ –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"
                    )
                elif state["step"] == "volume":
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞
                    match = re.search(r'(\d+).*?(\d+(?:[.,]\d+)?)\s*', text or "", re.IGNORECASE | re.DOTALL)
                    if not match:
                        await update.message.reply_text(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                            "–ü—Ä–∏–º–µ—Ä: 200 –ª–∏—Ç—Ä–æ–≤ –ø–æ 58 –≥—Ä–Ω"
                        )
                        return

                    volume = float(match.group(1))
                    price = float(match.group(2).replace(',', '.'))
                    username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                    photo_url = None
                    if update.message.photo:
                        try:
                            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–æ—Ç–æ
                            photo = update.message.photo[-1]
                            photo_file = await context.bot.get_file(photo.file_id)
                            photo_url = photo_file.file_path
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
                    elif update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith('image/'):
                        try:
                            doc_file = await context.bot.get_file(update.message.document.file_id)
                            photo_url = doc_file.file_path
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞-—Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç match –¥–ª—è handle_purchase
                    match_obj = type('Match', (), {
                        'group': lambda x: {
                            'car_number': state["car_number"],
                            'volume': str(volume),
                            'price': str(price)
                        }[x]
                    })

                    await self.handle_purchase(update, match_obj, username, photo_url)
                    if user_id in self.user_states:
                        del self.user_states[user_id]

            elif state["action"] == "refuel":
                if state["step"] == "car_number":
                    if not self.validate_car_number(text):
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
                        )
                        return
                    state["car_number"] = text
                    state["step"] = "volume"
                    await update.message.reply_text(
                        "‚õΩ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∏ –ø—Ä–æ–±–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "30 –ª–∏—Ç—Ä–æ–≤. –ü—Ä–æ–±–µ–≥: 125000 –∫–º\n\n"
                        "üì∏ –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"
                    )
                elif state["step"] == "volume":
                    match = re.search(r'(\d+).*?(\d+)\s*', text, re.IGNORECASE | re.DOTALL)
                    if not match:
                        await update.message.reply_text(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                            "–ü—Ä–∏–º–µ—Ä: 30 –ª–∏—Ç—Ä–æ–≤. –ü—Ä–æ–±–µ–≥: 125000 –∫–º"
                        )
                        return

                    volume = float(match.group(1))
                    mileage = int(match.group(2))
                    username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                    photo_url = None
                    if update.message.photo:
                        try:
                            photo = update.message.photo[-1]
                            photo_file = await context.bot.get_file(photo.file_id)
                            photo_url = photo_file.file_path
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç match –¥–ª—è handle_refuel
                    match_obj = type('Match', (), {
                        'group': lambda x: {
                            'car_number': state["car_number"],
                            'volume': str(volume),
                            'mileage': str(mileage)
                        }[x]
                    })

                    await self.handle_refuel(update, match_obj, username, photo_url)
                    if user_id in self.user_states:
                        del self.user_states[user_id]

            elif state["action"] == "generator":
                if state["step"] == "car_number":
                    if not self.validate_generator_number(text):
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_generators)}"
                        )
                        return
                    state["car_number"] = text
                    state["step"] = "volume"
                    await update.message.reply_text(
                        "‚õΩ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º, —Ü–µ–Ω—É –∏ –º–æ—Ç–æ—á–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "10 –ª–∏—Ç—Ä–æ–≤, —Ü–µ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å—ã: 255\n\n"
                        "üì∏ –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"
                    )
                elif state["step"] == "volume":
                    numbers = re.findall(r'\d+(?:[.,]\d+)?', text)
                    if len(numbers) >= 3:
                        try:
                            volume = float(numbers[0])
                            price = float(numbers[1].replace(',', '.'))
                            hours = int(numbers[2])
                            
                            username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                            photo_url = None
                            if update.message.photo:
                                try:
                                    photo = update.message.photo[-1]
                                    photo_file = await context.bot.get_file(photo.file_id)
                                    photo_url = photo_file.file_path
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

                            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç match –¥–ª—è handle_generator_refuel
                            match_obj = type('Match', (), {
                                'group': lambda x: {
                                    'car_number': state["car_number"],
                                    'volume': str(volume),
                                    'price': str(price),
                                    'hours': str(hours)
                                }[x]
                            })

                            await self.handle_generator_refuel(update, match_obj, username, photo_url)
                            if user_id in self.user_states:
                                del self.user_states[user_id]
                        except ValueError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–µ–ª: {e}")
                            await update.message.reply_text(
                                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª.\n"
                                "–ü—Ä–∏–º–µ—Ä: 10 –ª–∏—Ç—Ä–æ–≤, —Ü–µ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å—ã: 255"
                            )
                            return
                    else:
                        await update.message.reply_text(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                            "–ü—Ä–∏–º–µ—Ä: 10 –ª–∏—Ç—Ä–æ–≤, —Ü–µ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å—ã: 255"
                        )
                        return

            elif state["action"] == "history":
                if state["step"] == "car_number":
                    if not self.validate_car_number(text):
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
                        )
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è history
                    context.args = [text]
                    await self.history(update, context)
                    if user_id in self.user_states:
                        del self.user_states[user_id]

            elif state["action"] == "balance":
                if state["step"] == "car_number":
                    if not self.validate_car_number(text):
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_cars)}"
                        )
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è balance
                    context.args = [text]
                    await self.balance(update, context)
                    if user_id in self.user_states:
                        del self.user_states[user_id]

            elif state["action"] == "generator_info":
                if state["step"] == "car_number":
                    if not self.validate_generator_number(text):
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(self.supported_generators)}"
                        )
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è generator_info
                    context.args = [text]
                    await self.generator_info(update, context)
                    if user_id in self.user_states:
                        del self.user_states[user_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞: {e}")
            if user_id in self.user_states:
                del self.user_states[user_id]
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def check_sheets_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            current_time = datetime.now()
            if (self.last_sheets_check is None or 
                (current_time - self.last_sheets_check).total_seconds() >= self.sheets_check_interval):
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏—Å—Ç—ã
                all_sheets = self.spreadsheet.worksheets()
                current_cars = []
                current_generators = []
                
                for sheet in all_sheets:
                    sheet_name = sheet.title
                    number_match = re.search(r'\d+', sheet_name)
                    if number_match:
                        number = number_match.group(0)
                        if "–ê–≤—Ç–æ" in sheet_name:
                            current_cars.append(number)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            if len(sheet.get_all_values()) == 0:
                                self.setup_worksheet_headers(sheet)
                                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ {sheet_name}")
                        elif "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" in sheet_name:
                            current_generators.append(number)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            if len(sheet.get_all_values()) == 0:
                                self.setup_worksheet_headers(sheet)
                                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ {sheet_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if set(current_cars) != set(self.supported_cars):
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {current_cars}")
                    self.supported_cars = current_cars
                
                if set(current_generators) != set(self.supported_generators):
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤: {current_generators}")
                    self.supported_generators = current_generators
                
                self.last_sheets_check = current_time
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.telegram_token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("templates", self.templates))
        application.add_handler(CommandHandler("balance", self.balance))
        application.add_handler(CommandHandler("generator", self.generator_info))
        application.add_handler(CommandHandler("history", self.history))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_button_press
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–ø–∏—Å—è–º–∏
        application.add_handler(MessageHandler(
            filters.PHOTO,
            self.handle_button_press
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
        application.add_handler(MessageHandler(
            filters.Document.IMAGE,
            self.handle_button_press
        ))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        application.job_queue.run_repeating(
            lambda context: asyncio.create_task(self.check_sheets_updates()),
            interval=self.sheets_check_interval,
            first=10
        )

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    TELEGRAM_TOKEN = "8188884027:AAE4UprngplID-8bddLp63LwS13HOkRACp8"
    GOOGLE_SHEETS_CREDENTIALS_PATH = "credentials.json"
    SPREADSHEET_ID = "1IwuHWYLZaiUPfNFc2YpZg9k5OOVRYX99Nt0V2i5T1lA"

    try:
        bot = FuelTrackingBot(
            telegram_token=TELEGRAM_TOKEN,
            google_sheets_credentials_path=GOOGLE_SHEETS_CREDENTIALS_PATH,
            spreadsheet_id=SPREADSHEET_ID
        )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if bot.test_connection():
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            bot.run()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
