import os
import re
import logging
from datetime import datetime
from typing import Optional, Dict, Any, List
import asyncio

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackQueryHandler
)
import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FuelTrackingBot:
    def __init__(self, telegram_token: str, google_sheets_credentials_path: str, spreadsheet_id: str):
        self.telegram_token = telegram_token
        self.spreadsheet_id = spreadsheet_id
        self.supported_cars = []
        self.supported_generators = []

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
        self.scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]

        try:
            self.credentials = Credentials.from_service_account_file(
                google_sheets_credentials_path, scopes=self.scope
            )
            self.gc = gspread.authorize(self.credentials)
            self.spreadsheet = self.gc.open_by_key(spreadsheet_id)
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—å –¥–æ Google Sheets")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤
            self.load_vehicles_and_generators()
            
        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª credentials.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            raise Exception("–§–∞–π–ª –∑ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ Google –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö –¥–æ credentials.json")
        except gspread.exceptions.APIError as e:
            if "SERVICE_DISABLED" in str(e):
                logger.error("‚ùå Google Sheets API –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!")
                raise Exception(
                    "Google Sheets API –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —É –≤–∞—à–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ!\n"
                    "–£–≤—ñ–º–∫–Ω—ñ—Ç—å API –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: https://console.developers.google.com/apis/api/sheets.googleapis.com/overview\n"
                    "–¢–∞–∫–æ–∂ —É–≤—ñ–º–∫–Ω—ñ—Ç—å Google Drive API: https://console.developers.google.com/apis/api/drive.googleapis.com/overview"
                )
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Google Sheets API: {e}")
                raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets: {e}")
        except PermissionError:
            logger.error("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets!")
            raise Exception(
                "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ!\n"
                "1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ Google Sheets API —Ç–∞ Google Drive API\n"
                "2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ Service Account –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∞–±–ª–∏—Ü—ñ\n"
                "3. –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è API"
            )

        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
        self.purchase_pattern = re.compile(
            r'(?P<car_number>\d+)\s*(?:\n|\s)+[–ö–∫]—É–ø–∏–ª\s+(?P<volume>\d+)\s*–ª–∏—Ç—Ä[–∞-—è]*\s*–ø–æ\s+(?P<price>\d+(?:[.,]\d+)?)\s*–≥—Ä–Ω',
            re.IGNORECASE | re.MULTILINE
        )

        self.refuel_pattern = re.compile(
            r'(?P<car_number>\d+)\s*(?:\n|\s)+[–ó–∑]–∞–ø—Ä–∞–≤–∫–∞\s+(?P<volume>\d+)\s*–ª–∏—Ç—Ä[–∞-—è]*.*?[–ü–ø]—Ä–æ–±–µ–≥[:\s]*(?P<mileage>\d+)\s*–∫–º',
            re.IGNORECASE | re.MULTILINE | re.DOTALL
        )

        self.generator_pattern = re.compile(
            r'(?P<car_number>\d+)\s*(?:\n|\s)+[–ó–∑]–∞–ø—Ä–∞–≤–∫–∞\s+–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.*?(?P<volume>\d+)\s*–ª–∏—Ç—Ä[–∞-—è]*.*?—Ü–µ–Ω–∞\s+(?P<price>\d+(?:[.,]\d+)?)\s*–≥—Ä–Ω.*?–º–æ—Ç–æ—á–∞—Å—ã[:\s]*(?P<hours>\d+)',
            re.IGNORECASE | re.MULTILINE | re.DOTALL
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        self.user_states = {}

    def load_vehicles_and_generators(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ª–∏—Å—Ç –∑ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è–º–∏
            vehicles_sheet = self.get_or_create_worksheet("–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ")
            if len(vehicles_sheet.get_all_values()) <= 1:  # –Ø–∫—â–æ –ª–∏—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π (—Ç—ñ–ª—å–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                vehicles_sheet.append_row(["–ù–æ–º–µ—Ä", "–ù–∞–∑–≤–∞", "–¢–∏–ø"])

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            vehicles_data = vehicles_sheet.get_all_records()
            self.supported_cars = [str(v['–ù–æ–º–µ—Ä']) for v in vehicles_data if v['–¢–∏–ø'] == '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å']
            self.supported_generators = [str(v['–ù–æ–º–µ—Ä']) for v in vehicles_data if v['–¢–∏–ø'] == '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä']
            
            logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.supported_cars)} –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∞ {len(self.supported_generators)} –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤")

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            sheet_info = self.spreadsheet.title
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–∞–±–ª–∏—Ü–∞: '{sheet_info}'")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_or_create_worksheet(self, sheet_name: str):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–∏—Å—Ç —É —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            worksheet = self.spreadsheet.worksheet(sheet_name)
        except gspread.WorksheetNotFound:
            worksheet = self.spreadsheet.add_worksheet(title=sheet_name, rows=1000, cols=10)
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –ª–∏—Å—Ç–∞
            if sheet_name == "–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ":
                headers = ["–ù–æ–º–µ—Ä", "–ù–∞–∑–≤–∞", "–¢–∏–ø"]
            elif "–ê–≤—Ç–æ" in sheet_name:
                headers = ["–î–∞—Ç–∞", "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", "–û–±—ä—ë–º (–ª)", "–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ü—Ä–æ–±–µ–≥",
                           "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–§–æ—Ç–æ"]
            elif "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä" in sheet_name:
                headers = ["–î–∞—Ç–∞", "–û–±—ä—ë–º (–ª)", "–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ú–æ—Ç–æ—á–∞—Å—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–§–æ—Ç–æ"]
            else:
                headers = ["–î–∞–Ω—ñ"]

            worksheet.append_row(headers)

        return worksheet

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [KeyboardButton("üü¢ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞"), KeyboardButton("üîµ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ")],
            [KeyboardButton("üü° –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton("‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä")],
            [KeyboardButton("üìä –û—Å—Ç–∞—Ç–∫–∏"), KeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        cars_list = "\n".join([f"üöó –ê–≤—Ç–æ {car}" for car in self.supported_cars])
        generators_list = "\n".join([f"‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {gen}" for gen in self.supported_generators])

        welcome_message = f"""
üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/–æ—Å—Ç–∞—Ç–æ–∫ [–Ω–æ–º–µ—Ä] - –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞
/–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä [–Ω–æ–º–µ—Ä] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É  
/–∏—Å—Ç–æ—Ä–∏—è [–Ω–æ–º–µ—Ä] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
/—à–∞–±–ª–æ–Ω—ã - –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π

üöó **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ:**
{cars_list}

‚ö° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:**
{generators_list}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!
        """
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def templates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /—à–∞–±–ª–æ–Ω–∏"""
        templates_message = """
üìë –®–∞–±–ª–æ–Ω–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:

1Ô∏è‚É£ –ó–∞–∫—É–ø–∫–∞ –ø–∞–ª–∏–≤–∞:
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "üü¢ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞"
2. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5513)
3. –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º —Ç–∞ —Ü—ñ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:
   200 –ª—ñ—Ç—Ä—ñ–≤ –ø–æ 58 –≥—Ä–Ω
4. –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

2Ô∏è‚É£ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "üîµ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ"
2. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5513)
3. –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º —Ç–∞ –ø—Ä–æ–±—ñ–≥ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
   30 –ª—ñ—Ç—Ä—ñ–≤. –ü—Ä–æ–±—ñ–≥: 125000 –∫–º
4. –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

3Ô∏è‚É£ –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "üü° –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"
2. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5513)
3. –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º, —Ü—ñ–Ω—É —Ç–∞ –º–æ—Ç–æ—á–∞—Å–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
   10 –ª—ñ—Ç—Ä—ñ–≤, —Ü—ñ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å–∏: 255
4. –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

‚ùóÔ∏è –í–∞–∂–ª–∏–≤–æ: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π!
üí° –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞–ø–∏—à—ñ—Ç—å "–æ—Ç–º–µ–Ω–∞"
"""
        await update.message.reply_text(templates_message)

    async def history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /–∏—Å—Ç–æ—Ä–∏—è"""
        if not context.args:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è. –ü—Ä–∏–∫–ª–∞–¥: /–∏—Å—Ç–æ—Ä–∏—è 5513"
            )
            return

        car_number = context.args[0]
        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {car_number} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
            )
            return

        try:
            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            records = worksheet.get_all_records()
            
            if not records:
                await update.message.reply_text(f"üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—é {car_number}")
                return

            # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤
            last_records = records[-5:]
            message = f"üìà –û—Å—Ç–∞–Ω–Ω—ñ 5 –æ–ø–µ—Ä–∞—Ü—ñ–π –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—é {car_number}:\n\n"
            
            for record in reversed(last_records):
                operation_type = record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ù–µ–≤—ñ–¥–æ–º–æ')
                volume = record.get('–û–±—ä—ë–º (–ª)', '–ù/–î')
                date = record.get('–î–∞—Ç–∞', '–ù/–î')
                
                if operation_type == '–ó–∞–ø—Ä–∞–≤–∫–∞':
                    mileage = record.get('–ü—Ä–æ–±–µ–≥', '–ù/–î')
                    message += (
                        f"‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞: {volume} –ª\n"
                        f"üìè –ü—Ä–æ–±—ñ–≥: {mileage} –∫–º\n"
                        f"üìÖ {date}\n"
                    )
                else:
                    price = record.get('–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä', '–ù/–î')
                    message += (
                        f"üõí –ó–∞–∫—É–ø—ñ–≤–ª—è: {volume} –ª\n"
                        f"üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω/–ª\n"
                        f"üìÖ {date}\n"
                    )
                message += "---\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /–æ—Å—Ç–∞—Ç–æ–∫"""
        if not context.args:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è. –ü—Ä–∏–∫–ª–∞–¥: /–æ—Å—Ç–∞—Ç–æ–∫ 5513"
            )
            return

        car_number = context.args[0]
        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {car_number} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
            )
            return

        try:
            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            records = worksheet.get_all_records()

            total_purchased = 0
            total_consumed = 0
            total_cost = 0
            last_mileage = 0

            for record in records:
                if record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–∫—É–ø–∫–∞':
                    volume = float(record.get('–û–±—ä—ë–º (–ª)', 0) or 0)
                    price = float(record.get('–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä', 0) or 0)
                    total_purchased += volume
                    total_cost += volume * price
                elif record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–ø—Ä–∞–≤–∫–∞':
                    total_consumed += float(record.get('–û–±—ä—ë–º (–ª)', 0) or 0)
                    last_mileage = int(record.get('–ü—Ä–æ–±–µ–≥', 0) or 0)

            balance = total_purchased - total_consumed
            avg_price = total_cost / total_purchased if total_purchased > 0 else 0

            message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—é {car_number}:

üí∞ –ó–∞–∫—É–ø–ª–µ–Ω–æ: {total_purchased:.1f} –ª
‚õΩ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_consumed:.1f} –ª
üìà –ó–∞–ª–∏—à–æ–∫: {balance:.1f} –ª
üíµ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price:.2f} –≥—Ä–Ω/–ª
üìè –û—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–æ–±—ñ–≥: {last_mileage} –∫–º
            """
            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ª–∏—à–∫—É: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    async def generator_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
        if not context.args:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: /–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 5513"
            )
            return

        generator_number = context.args[0]
        if not self.validate_generator_number(generator_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {generator_number} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_generators)}"
            )
            return

        try:
            worksheet_name = f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {generator_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            records = worksheet.get_all_records()
            
            if not records:
                await update.message.reply_text(f"üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É {generator_number}")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤
            last_records = records[-5:]
            total_volume = sum(float(r.get('–û–±—ä—ë–º (–ª)', 0) or 0) for r in records)
            total_cost = sum(float(r.get('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', 0) or 0) for r in records)
            last_hours = int(last_records[-1].get('–ú–æ—Ç–æ—á–∞—Å—ã', 0) or 0)
            
            message = f"""
‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É {generator_number}:

üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚õΩ –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: {total_volume:.1f} –ª
üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost:.2f} –≥—Ä–Ω
üïê –û—Å—Ç–∞–Ω–Ω—ñ –º–æ—Ç–æ—á–∞—Å–∏: {last_hours}

üìà –û—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø—Ä–∞–≤–æ–∫:
"""
            
            for record in reversed(last_records):
                volume = record.get('–û–±—ä—ë–º (–ª)', '–ù/–î')
                price = record.get('–¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä', '–ù/–î')
                hours = record.get('–ú–æ—Ç–æ—á–∞—Å—ã', '–ù/–î')
                date = record.get('–î–∞—Ç–∞', '–ù/–î')
                
                message += f"""
‚õΩ –û–±'—î–º: {volume} –ª
üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω/–ª
üïê –ú–æ—Ç–æ—á–∞—Å–∏: {hours}
üìÖ {date}
---
"""
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    async def handle_button_press(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        text = update.message.text if update.message.text else ""
        user_id = update.message.from_user.id

        # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
        if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"]:
            if user_id in self.user_states:
                del self.user_states[user_id]
                await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        if text == "üü¢ –ó–∞–∫—É–ø–∫–∞ —Ç–æ–ø–ª–∏–≤–∞":
            self.user_states[user_id] = {"action": "purchase", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üîµ –ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ":
            self.user_states[user_id] = {"action": "refuel", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üü° –ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞":
            self.user_states[user_id] = {"action": "generator", "step": "car_number"}
            await update.message.reply_text(
                "‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üìä –û—Å—Ç–∞—Ç–∫–∏":
            self.user_states[user_id] = {"action": "balance", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä":
            self.user_states[user_id] = {"action": "generator_info", "step": "car_number"}
            await update.message.reply_text(
                "‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üìà –ò—Å—Ç–æ—Ä–∏—è":
            self.user_states[user_id] = {"action": "history", "step": "car_number"}
            await update.message.reply_text(
                "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5513):\n\n"
                "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )

        elif text == "üìã –®–∞–±–ª–æ–Ω—ã":
            await self.templates(update, context)

        else:
            # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.handle_text_input(update, context)

    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        text = update.message.text

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        if user_id in self.user_states:
            await self.handle_step_input(update, context)
            return

        # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç
        await self.handle_message(update, context)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user = update.message.from_user
        username = user.username or f"{user.first_name} {user.last_name or ''}".strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
        photo_info = "–ï—Å—Ç—å" if update.message.photo else "–ù–µ—Ç"

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∑–∞–∫—É–ø–∫—É —Ç–æ–ø–ª–∏–≤–∞
        purchase_match = self.purchase_pattern.search(text)
        if purchase_match:
            await self.handle_purchase(update, purchase_match, username, photo_info)
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∑–∞–ø—Ä–∞–≤–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        refuel_match = self.refuel_pattern.search(text)
        if refuel_match:
            await self.handle_refuel(update, refuel_match, username, photo_info)
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∑–∞–ø—Ä–∞–≤–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator_match = self.generator_pattern.search(text)
        if generator_match:
            await self.handle_generator_refuel(update, generator_match, username, photo_info)
            return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."
        )

    def validate_car_number(self, car_number: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""
        return car_number in self.supported_cars

    def validate_generator_number(self, generator_number: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        return generator_number in self.supported_generators

    async def handle_purchase(self, update: Update, match, username: str, photo_url: str = None):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—É–ø—ñ–≤–ª—ñ –ø–∞–ª–∏–≤–∞"""
        if not photo_url:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–∫—É–ø—ñ–≤–ª—ñ –ø–∞–ª–∏–≤–∞.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
            )
            return

        car_number = match.group('car_number')

        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {car_number} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
            )
            return

        volume = float(match.group('volume'))
        price = float(match.group('price').replace(',', '.'))
        total_cost = volume * price

        try:
            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)

            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            row_data = [
                current_date,
                "–ó–∞–∫—É–ø–∫–∞",
                volume,
                price,
                total_cost,
                "",  # –ü—Ä–æ–±–µ–≥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º –¥–ª—è –∑–∞–∫—É–ø–∫–∏
                username,
                photo_url
            ]

            worksheet.append_row(row_data)

            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! {volume} –ª—ñ—Ç—Ä—ñ–≤ –ø–æ {price} –≥—Ä–Ω –¥–æ–¥–∞–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥ –∞–≤—Ç–æ {car_number} –∑ —Ñ–æ—Ç–æ —á–µ–∫–∞.\n"
                f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost} –≥—Ä–Ω"
            )

            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if update.message.from_user.id in self.user_states:
                del self.user_states[update.message.from_user.id]

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –∑–∞–∫—É–ø—ñ–≤–ª—ñ: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–∏—à–µ —Ñ–æ—Ç–æ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    async def handle_photo_only(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –æ–∫—Ä–µ–º–∏—Ö —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        user_id = update.message.from_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        if user_id in self.user_states:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –ª–∏—à–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç—É –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è –æ–±'—î–º—É
            state = self.user_states[user_id]
            if state["action"] == "purchase" and state["step"] == "volume":
                await update.message.reply_text(
                    "üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–±'—î–º —Ç–∞ —Ü—ñ–Ω—É:\n"
                    "–ü—Ä–∏–∫–ª–∞–¥: 200 –ª—ñ—Ç—Ä—ñ–≤ –ø–æ 58 –≥—Ä–Ω"
                )
                return

        # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await update.message.reply_text(
            "üì∏ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–∫—É–ø—ñ–≤–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /fuel"
        )

    # –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
    def setup_worksheet_headers(self, worksheet):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è —Ä–æ–±–æ—á–æ–≥–æ –ª–∏—Å—Ç–∞"""
        headers = [
            "–î–∞—Ç–∞/–ß–∞—Å",
            "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó",
            "–û–±'—î–º (–ª)",
            "–¶—ñ–Ω–∞ –∑–∞ –ª—ñ—Ç—Ä (–≥—Ä–Ω)",
            "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å (–≥—Ä–Ω)",
            "–ü—Ä–æ–±–µ–≥ (–∫–º)",
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
            "–§–æ—Ç–æ —á–µ–∫–∞"
        ]

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not worksheet.get_all_values():
            worksheet.append_row(headers)

            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
            try:
                worksheet.format('A1:H1', {
                    "backgroundColor": {"red": 0.8, "green": 0.8, "blue": 0.8},
                    "textFormat": {"bold": True}
                })
            except:
                pass

    async def handle_refuel(self, update: Update, match, username: str, photo_url: str = None):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""
        if not photo_url:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–∫—É–ø—ñ–≤–ª—ñ –ø–∞–ª–∏–≤–∞.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
            )
            return

        car_number = match.group('car_number')
        
        if not self.validate_car_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {car_number} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
            )
            return

        try:
            volume = float(match.group('volume'))
            mileage = int(match.group('mileage'))
            
            if volume <= 0:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –û–±'—î–º –∑–∞–ø—Ä–∞–≤–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
                return
                
            if mileage < 0:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ü—Ä–æ–±—ñ–≥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º")
                return

            worksheet_name = f"–ê–≤—Ç–æ {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            row_data = [
                current_date,
                "–ó–∞–ø—Ä–∞–≤–∫–∞",
                volume,
                "",  # –¶–µ–Ω–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏
                "",  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏
                mileage,
                username,
                photo_url
            ]
            
            worksheet.append_row(row_data)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞—Ç–æ–∫ –ø—ñ—Å–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏
            records = worksheet.get_all_records()
            total_purchased = sum(float(r.get('–û–±—ä—ë–º (–ª)', 0) or 0) for r in records if r.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–∫—É–ø–∫–∞')
            total_consumed = sum(float(r.get('–û–±—ä—ë–º (–ª)', 0) or 0) for r in records if r.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏') == '–ó–∞–ø—Ä–∞–≤–∫–∞')
            balance = total_purchased - total_consumed
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ {volume} –ª –∑–∞–ø–∏—Å–∞–Ω–∞ –∑ —Ñ–æ—Ç–æ —á–µ–∫–∞.\n"
                f"üìè –ü—Ä–æ–±—ñ–≥: {mileage} –∫–º\n"
                f"üìä –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ: {balance:.1f} –ª"
            )
            
        except ValueError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –∑–∞–ø—Ä–∞–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.\n"
                "–ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:\n"
                "–ó–∞–ø—Ä–∞–≤–∫–∞ 30 –ª—ñ—Ç—Ä—ñ–≤. –ü—Ä–æ–±—ñ–≥: 125000 –∫–º"
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –∑–∞–ø—Ä–∞–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    async def handle_generator_refuel(self, update: Update, match, username: str, photo_url: str = None):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        if not photo_url:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –§–æ—Ç–æ —á–µ–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–∫—É–ø—ñ–≤–ª—ñ –ø–∞–ª–∏–≤–∞.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
            )
            return

        car_number = match.group('car_number')
        
        if not self.validate_generator_number(car_number):
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {car_number} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_generators)}"
            )
            return

        try:
            volume = float(match.group('volume'))
            price = float(match.group('price').replace(',', '.'))
            hours = int(match.group('hours'))
            
            if volume <= 0:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –û–±'—î–º –∑–∞–ø—Ä–∞–≤–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
                return
                
            if price <= 0:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
                return
                
            if hours < 0:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ú–æ—Ç–æ—á–∞—Å–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏")
                return

            total_cost = volume * price
            
            worksheet_name = f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {car_number}"
            worksheet = self.get_or_create_worksheet(worksheet_name)
            
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            row_data = [
                current_date,
                volume,
                price,
                total_cost,
                hours,
                username,
                photo_url
            ]
            
            worksheet.append_row(row_data)
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä {car_number} –∑ —Ñ–æ—Ç–æ —á–µ–∫–∞\n"
                f"‚õΩ –û–±'—î–º: {volume} –ª\n"
                f"üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω/–ª\n"
                f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost} –≥—Ä–Ω\n"
                f"üïê –ú–æ—Ç–æ—á–∞—Å–∏: {hours}"
            )
            
        except ValueError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –∑–∞–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.\n"
                "–ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:\n"
                "–ó–∞–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "10 –ª—ñ—Ç—Ä—ñ–≤, —Ü—ñ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å–∏: 255"
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –∑–∞–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    async def handle_step_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        user_id = update.message.from_user.id
        text = update.message.text or update.message.caption
        state = self.user_states[user_id]

        if text and text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"]:
            del self.user_states[user_id]
            await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            return

        if state["action"] == "purchase":
            if state["step"] == "car_number":
                if not self.validate_car_number(text):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {text} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
                    )
                    return
                state["car_number"] = text
                state["step"] = "volume"
                await update.message.reply_text(
                    "‚õΩ –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º —Ç–∞ —Ü—ñ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                    "200 –ª—ñ—Ç—Ä—ñ–≤ –ø–æ 58 –≥—Ä–Ω\n\n"
                    "üì∏ –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Ä–∞–∑–æ–º –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º"
                )
            elif state["step"] == "volume":
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–∫—Å—Ç—É
                match = re.search(r'(\d+)\s*–ª—ñ—Ç—Ä(?:[–∞-—è—ñ—ó—î“ë]*)?\s*–ø–æ\s*(\d+(?:[.,]\d+)?)\s*–≥—Ä–Ω', text or "",
                                  re.IGNORECASE)
                if not match:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n"
                        "–ü—Ä–∏–∫–ª–∞–¥: 200 –ª—ñ—Ç—Ä—ñ–≤ –ø–æ 58 –≥—Ä–Ω"
                    )
                    return

                volume = float(match.group(1))
                price = float(match.group(2).replace(',', '.'))
                username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

                # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
                photo_url = None
                if update.message.photo:
                    try:
                        # –ë–µ—Ä–µ–º –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º —Ñ–æ—Ç–æ
                        photo = update.message.photo[-1]
                        photo_file = await context.bot.get_file(photo.file_id)
                        photo_url = photo_file.file_path
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")

                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç match –¥–ª—è handle_purchase
                match_obj = type('Match', (), {
                    'group': lambda x: {
                        'car_number': state["car_number"],
                        'volume': str(volume),
                        'price': str(price)
                    }[x]
                })

                await self.handle_purchase(update, match_obj, username, photo_url)
                del self.user_states[user_id]

        elif state["action"] == "refuel":
            if state["step"] == "car_number":
                if not self.validate_car_number(text):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {text} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
                    )
                    return
                state["car_number"] = text
                state["step"] = "volume"
                await update.message.reply_text(
                    "‚õΩ –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º —Ç–∞ –ø—Ä–æ–±—ñ–≥ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                    "30 –ª—ñ—Ç—Ä—ñ–≤. –ü—Ä–æ–±—ñ–≥: 125000 –∫–º\n\n"
                    "üì∏ –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Ä–∞–∑–æ–º –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º"
                )
            elif state["step"] == "volume":
                match = re.search(r'(\d+)\s*–ª—ñ—Ç—Ä[–∞-—è—ñ—ó—î“ë]*.*?[–ü–ø]—Ä–æ–±[—ñ–µ]–≥[:\s]*(\d+)\s*–∫–º', text, re.IGNORECASE | re.DOTALL)
                if not match:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n"
                        "–ü—Ä–∏–∫–ª–∞–¥: 30 –ª—ñ—Ç—Ä—ñ–≤. –ü—Ä–æ–±—ñ–≥: 125000 –∫–º"
                    )
                    return

                volume = float(match.group(1))
                mileage = int(match.group(2))
                username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

                # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
                photo_url = None
                if update.message.photo:
                    try:
                        photo = update.message.photo[-1]
                        photo_file = await context.bot.get_file(photo.file_id)
                        photo_url = photo_file.file_path
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")

                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç match –¥–ª—è handle_refuel
                match_obj = type('Match', (), {
                    'group': lambda x: {
                        'car_number': state["car_number"],
                        'volume': str(volume),
                        'mileage': str(mileage)
                    }[x]
                })

                await self.handle_refuel(update, match_obj, username, photo_url)
                del self.user_states[user_id]

        elif state["action"] == "generator":
            if state["step"] == "car_number":
                if not self.validate_generator_number(text):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {text} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_generators)}"
                    )
                    return
                state["car_number"] = text
                state["step"] = "volume"
                await update.message.reply_text(
                    "‚õΩ –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º, —Ü—ñ–Ω—É —Ç–∞ –º–æ—Ç–æ—á–∞—Å–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                    "10 –ª—ñ—Ç—Ä—ñ–≤, —Ü—ñ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å–∏: 255\n\n"
                    "üì∏ –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Ä–∞–∑–æ–º –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º"
                )
            elif state["step"] == "volume":
                match = re.search(r'(\d+)\s*–ª—ñ—Ç—Ä[–∞-—è—ñ—ó—î“ë]*.*?—Ü—ñ–Ω–∞\s*(\d+(?:[.,]\d+)?)\s*–≥—Ä–Ω.*?–º–æ—Ç–æ—á–∞—Å–∏[:\s]*(\d+)', text, re.IGNORECASE | re.DOTALL)
                if not match:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n"
                        "–ü—Ä–∏–∫–ª–∞–¥: 10 –ª—ñ—Ç—Ä—ñ–≤, —Ü—ñ–Ω–∞ 60 –≥—Ä–Ω, –º–æ—Ç–æ—á–∞—Å–∏: 255"
                    )
                    return

                volume = float(match.group(1))
                price = float(match.group(2).replace(',', '.'))
                hours = int(match.group(3))
                username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

                # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
                photo_url = None
                if update.message.photo:
                    try:
                        photo = update.message.photo[-1]
                        photo_file = await context.bot.get_file(photo.file_id)
                        photo_url = photo_file.file_path
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")

                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç match –¥–ª—è handle_generator_refuel
                match_obj = type('Match', (), {
                    'group': lambda x: {
                        'car_number': state["car_number"],
                        'volume': str(volume),
                        'price': str(price),
                        'hours': str(hours)
                    }[x]
                })

                await self.handle_generator_refuel(update, match_obj, username, photo_url)
                del self.user_states[user_id]

        elif state["action"] == "history":
            if state["step"] == "car_number":
                if not self.validate_car_number(text):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {text} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
                    )
                    return
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è history
                context.args = [text]
                await self.history(update, context)
                del self.user_states[user_id]

        elif state["action"] == "balance":
            if state["step"] == "car_number":
                if not self.validate_car_number(text):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è {text} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_cars)}"
                    )
                    return
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è balance
                context.args = [text]
                await self.balance(update, context)
                del self.user_states[user_id]

        elif state["action"] == "generator_info":
            if state["step"] == "car_number":
                if not self.validate_generator_number(text):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–æ–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {text} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º–µ—Ä–∏: {', '.join(self.supported_generators)}"
                    )
                    return
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è generator_info
                context.args = [text]
                await self.generator_info(update, context)
                del self.user_states[user_id]

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.telegram_token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("templates", self.templates))
        application.add_handler(CommandHandler("balance", self.balance))
        application.add_handler(CommandHandler("generator", self.generator_info))
        application.add_handler(CommandHandler("history", self.history))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_button_press
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–ø–∏—Å—è–º–∏
        application.add_handler(MessageHandler(
            filters.PHOTO,
            self.handle_button_press
        ))

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    TELEGRAM_TOKEN = "8188884027:AAE4UprngplID-8bddLp63LwS13HOkRACp8"
    GOOGLE_SHEETS_CREDENTIALS_PATH = "credentials.json"
    SPREADSHEET_ID = "1IwuHWYLZaiUPfNFc2YpZg9k5OOVRYX99Nt0V2i5T1lA"

    try:
        bot = FuelTrackingBot(
            telegram_token=TELEGRAM_TOKEN,
            google_sheets_credentials_path=GOOGLE_SHEETS_CREDENTIALS_PATH,
            spreadsheet_id=SPREADSHEET_ID
        )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if bot.test_connection():
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            bot.run()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
